
import requests
from bs4 import BeautifulSoup
from datetime import datetime
import streamlit as st
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time


def hent_bildata_skat(nummerplade):
    url = f"https://motorregister.skat.dk/Selvbetjening/Koeretoej/Soegning?soeg={nummerplade}"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")

    data = {}
    tekstfelter = soup.find_all("div", class_="vehicle-field")
    for felt in tekstfelter:
        label = felt.find("div", class_="vehicle-label")
        value = felt.find("div", class_="vehicle-value")
        if label and value:
            data[label.text.strip()] = value.text.strip()

    return data


def beregn_anbefalet_kobspris(salgspris, √•rgang, kilometer, br√¶ndstof):
    alder = datetime.now().year - √•rgang
    afskriv_km = kilometer * 0.05
    afskriv_√•r = alder * 5000

    br√¶ndstof_faktor = {"benzin": 0, "diesel": -3000, "el": 10000}
    fuel_just = br√¶ndstof_faktor.get(br√¶ndstof.lower(), 0)

    vurderet = salgspris - afskriv_km - afskriv_√•r + fuel_just
    min_avance = max(vurderet * 0.15, 20000)
    kobspris = vurderet - min_avance

    return round(kobspris, 2), round(min_avance, 2)


def hent_markedspriser_bilbasen(m√¶rke, model, √•rgang):
    query_model = model.replace(" ", "%20")
    url = f"https://www.bilbasen.dk/brugt/bil/resultat?Make={m√¶rke}&Model={query_model}&YearFrom={√•rgang}&YearTo={√•rgang}"

    options = Options()
    options.headless = True
    driver = webdriver.Chrome(options=options)
    driver.get(url)
    time.sleep(3)

    soup = BeautifulSoup(driver.page_source, "html.parser")
    driver.quit()

    priser = []
    biler = soup.find_all("div", class_="bb-listing__price")
    for bil in biler:
        pris_txt = bil.text.strip().replace(" kr.", "").replace(".", "").replace(" ", "")
        try:
            pris = int(pris_txt)
            priser.append(pris)
        except:
            continue

    if priser:
        return {
            "antal": len(priser),
            "gennemsnit": sum(priser) / len(priser),
            "min": min(priser),
            "max": max(priser)
        }
    return None


# Streamlit Webapp
st.set_page_config(page_title="TA Biler - Prisvurdering", layout="centered")
st.title("üöó TA Biler - Automatisk prisvurdering")
st.markdown("Indtast en nummerplade og en forventet salgspris, s√• vurderer vi maksimal k√∏bspris baseret p√• alder, km og br√¶ndstof.")

nummerplade = st.text_input("Nummerplade", max_chars=10)
salgspris_input = st.number_input("Forventet salgspris (DKK)", min_value=0.0, step=1000.0)

if st.button("Vurder bil") and nummerplade and salgspris_input:
    with st.spinner("üîç Henter data fra Skat.dk..."):
        try:
            data = hent_bildata_skat(nummerplade)
            √•rgang = int(data.get("F√∏rstegangsregistrering", "2020")[-4:])
            kilometer = int(data.get("Kilometerstand", "100000").replace('.', '').replace(' km', ''))
            br√¶ndstof = data.get("Drivmiddel", "benzin")
            model_full = data.get("Model", "")
            m√¶rke = data.get("M√¶rke", "")

            anbefalet_kobspris, min_avance = beregn_anbefalet_kobspris(salgspris_input, √•rgang, kilometer, br√¶ndstof)

            st.success("‚úÖ Vurdering fuldf√∏rt")
            st.write(f"**F√∏rstegangsregistrering:** {√•rgang}")
            st.write(f"**Kilometerstand:** {kilometer:,} km")
            st.write(f"**Br√¶ndstof:** {br√¶ndstof}")
            st.write(f"**Minimum avancekrav:** {min_avance:,.2f} DKK")
            st.write(f"### üí∞ Anbefalet maksimal k√∏bspris: `{anbefalet_kobspris:,.2f} DKK`")

            st.subheader("üìà Markedsdata fra Bilbasen")
            markedsdata = hent_markedspriser_bilbasen(m√¶rke, model_full, √•rgang)
            if markedsdata:
                st.write(f"Antal fundne biler: {markedsdata['antal']}")
                st.write(f"Gennemsnitspris: {markedsdata['gennemsnit']:,.0f} DKK")
                st.write(f"Prisinterval: {markedsdata['min']:,.0f} ‚Äì {markedsdata['max']:,.0f} DKK")
            else:
                st.info("Ingen markedsdata kunne hentes fra Bilbasen.")

        except Exception as e:
            st.error(f"Der opstod en fejl under hentning eller behandling af data: {str(e)}")
